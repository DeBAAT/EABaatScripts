<?xml version="1.0" encoding="Windows-1252" standalone="no"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="1" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{7B4CF8B0-9313-44a1-8F89-2111D183C9E0}" />
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;" />
			<Column name="Script" value="BaatDiagramScripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="79" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{38776898-1D9D-4ab7-81F7-16220D29A8E4}" />
			<Column name="ScriptAuthor" value="{7B4CF8B0-9313-44a1-8F89-2111D183C9E0}" />
			<Column name="Notes" value="&lt;Script Name=&quot;DiagramAnalysisLayout&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;" />
			<Column name="Script" value="//[group=BaatDiagramScripts]&#xA;!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-Logging&#xA;!INC EAScriptLib.JavaScript-Dialog&#xA;&#xA;/*&#xA; * Script Name:&#x9;DiagramAnalysisLayout&#xA; * Author:&#x9;&#x9;J de Baat&#xA; * Purpose:&#x9;&#x9;Dynamically draw elements on the diagram as indicated by the TaggedValues defined in the selected element&#xA; * Date:&#x9;&#x9;25-08-2024&#xA; *&#xA; * This script takes a number of selected elements on a diagram to start the analysis.&#xA; * For each selected element on a diagram&#xA; *   If the Keywords property of the element contains the DALKeywordsTag&#xA; *     Collect all referenced elements to a set for the first level&#xA; *     Process the current level for all elements in the set:&#xA; *       For each referenced element in the set&#xA; *         If element not yet drawn on the diagram&#xA; *           Draw the element on the indicated location of the diagram&#xA; *           Collect all referenced elements to a set for the next level&#xA; *       Recursively process the set of elements found&#xA; *&#xA; */&#xA;&#xA;/*&#xA; * mapDiagramLayoutValues is a map of [Key,Value] to use when generating the analysis diagram&#xA; * Each mapDiagramLayoutValue has a default defined which can be replaced with a value defined as TaggedValue for the selected element&#xA; */&#xA;var mapDiagramLayoutValues;&#xA;&#xA;var theGlobalDiagram as EA.Diagram;&#xA;&#xA;const DALDirection     = &quot;DALDirection&quot;;&#x9;&#x9;&#x9;// Whether to analyse in Horizontal (default) or Vertical Direction&#xA;const DALNumLevels     = &quot;DALNumLevels&quot;;&#x9;&#x9;&#x9;// Number of levels to analyse&#xA;const DALSpaceHor      = &quot;DALSpaceHor&quot;;&#x9;&#x9;&#x9;&#x9;// Horizontal spacing between elements&#xA;const DALSpaceVer      = &quot;DALSpaceVer&quot;;&#x9;&#x9;&#x9;&#x9;// Vertical spacing between elements&#xA;const DALStartHor      = &quot;DALStartHor&quot;;&#x9;&#x9;&#x9;&#x9;// Horizontal start for elements&#xA;const DALStartVer      = &quot;DALStartVer&quot;;&#x9;&#x9;&#x9;&#x9;// Vertical start for elements&#xA;const DALElementWidth  = &quot;DALElementWidth&quot;;&#x9;&#x9;&#x9;// Width of an element to draw&#xA;const DALElementHeight = &quot;DALElementHeight&quot;;&#x9;&#x9;// Height of an element to draw&#xA;&#xA;const DALTagPrefix     = &quot;DAL&quot;;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// String prefix to indicate that this TaggedValue can be used for DiagramAnalysisLayout&#xA;const DALKeywordsTag   = &quot;diagramanalysislayout&quot;;&#x9;// String Tag to indicate that this element can be used for DiagramAnalysisLayout&#xA;const DALHorizontal    = &quot;Horizontal&quot;;&#x9;&#x9;&#x9;&#x9;// Analyse in Horizontal (default) Direction&#xA;const DALVertical      = &quot;Vertical&quot;;&#x9;&#x9;&#x9;&#x9;// Analyse in Vertical Direction&#xA;&#xA;/*&#xA; * Create the set of defaults for mapDiagramLayoutValues&#xA; */&#xA;function createDiagramLayoutValues()&#xA;{&#xA;&#xA;&#x9;// Clean up memory and create a new Map&#xA;&#x9;mapDiagramLayoutValues = null;&#xA;&#x9;mapDiagramLayoutValues = new Map();&#xA;&#xA;&#x9;mapDiagramLayoutValues.set( DALDirection,     DALHorizontal );&#xA;&#x9;mapDiagramLayoutValues.set( DALNumLevels,     4             );&#xA;&#x9;mapDiagramLayoutValues.set( DALSpaceHor,      20            );&#xA;&#x9;mapDiagramLayoutValues.set( DALSpaceVer,      20            );&#xA;&#x9;mapDiagramLayoutValues.set( DALStartHor,      50            );&#xA;&#x9;mapDiagramLayoutValues.set( DALStartVer,      100           );&#xA;&#x9;mapDiagramLayoutValues.set( DALElementWidth,  150           );&#xA;&#x9;mapDiagramLayoutValues.set( DALElementHeight, 60            );&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Get the set of values for mapDiagramLayoutValues from the TaggedValues of the Element&#xA; */&#xA;function getDiagramLayoutValuesFromElement( theElement )&#xA;{&#xA;&#xA;&#x9;// Cast the input values to objects so we get intellisense&#xA;&#x9;var curElement      as EA.Element;&#xA;&#x9;var curElementTags  as EA.Collection;&#xA;&#x9;var curTaggedValue  as EA.TaggedValue;&#xA;&#xA;&#x9;curElement           = theElement;&#xA;&#x9;curElementTags       = curElement.TaggedValues;&#xA;&#xA;&#x9;// Check all element tags for mapDiagramLayoutValues (starting with &quot;DAL&quot;)&#xA;&#x9;let curElementTagsCount = curElementTags.Count;&#xA;&#x9;for ( var i = 0 ; i &lt; curElementTagsCount ; i++ )&#xA;&#x9;{&#xA;&#x9;&#x9;curTaggedValue = curElementTags.GetAt( i );&#xA;&#x9;&#x9;if ( (curTaggedValue.Name.startsWith( DALTagPrefix )) ) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Get the mapDiagramLayoutValues from the curTaggedValue&#xA;&#x9;&#x9;&#x9;mapDiagramLayoutValues.set( curTaggedValue.Name,   curTaggedValue.Value );&#xA;&#x9;&#x9;&#x9;// Session.Output(&quot;Found curTaggedValue to use for mapDiagramLayoutValues[ &quot; + curTaggedValue.Name + &quot; ] = &quot; + curTaggedValue.Value + &quot; !!!&quot; );&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;curElementTags = null;&#xA;&#xA;&#x9;return false;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Get the location of an element based on the parameters&#xA; */&#xA;function getElementLocation( numX, numY )&#xA;{&#xA;&#xA;&#x9;// Calculate the Offset values&#xA;&#x9;let intOffsetX = numX * ( Number( mapDiagramLayoutValues.get( DALSpaceHor ) ) + Number( mapDiagramLayoutValues.get( DALElementWidth  ) ) );&#xA;&#x9;let intOffsetY = numY * ( Number( mapDiagramLayoutValues.get( DALSpaceVer ) ) + Number( mapDiagramLayoutValues.get( DALElementHeight ) ) );&#xA;&#xA;&#x9;// Create new string from information calculated&#xA;&#x9;const locL = Number( intOffsetX ) + Number( mapDiagramLayoutValues.get( DALStartHor      ) );&#xA;&#x9;const locR = Number( locL       ) + Number( mapDiagramLayoutValues.get( DALElementWidth  ) );&#xA;&#x9;const locT = Number( intOffsetY ) + Number( mapDiagramLayoutValues.get( DALStartVer      ) );&#xA;&#x9;const locB = Number( locT       ) + Number( mapDiagramLayoutValues.get( DALElementHeight ) );&#xA;&#x9;const strElementLocation = &quot;l=&quot; + locL + &quot;;r=&quot; + locR + &quot;;t=&quot; + locT + &quot;;b=&quot; + locB + &quot;;&quot;;&#xA;&#xA;&#x9;return strElementLocation;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * An element is for DiagramAnalysisLayout when the KeywordsTag contains the string defined by DALKeywordsTag&#xA; */&#xA;function isDiagramAnalysisLayoutElement( theElement )&#xA;{&#xA;&#x9;// Cast theElement to EA.Element so we get intellisense&#xA;&#x9;var inputElement as EA.Element;&#xA;&#x9;inputElement      = theElement;&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;var strKeywordsTag = inputElement.Tag.toLowerCase();&#xA;&#x9;&#x9;var idxKeywordsTag = strKeywordsTag.indexOf( DALKeywordsTag );&#xA;&#x9;&#x9;return ( idxKeywordsTag &gt;= 0 );&#xA;&#x9;}&#xA;&#x9;catch(e)&#xA;&#x9;{&#xA;&#x9;    return false;&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Get the requested Element from theCollectionObjects using theElementID as parameter&#xA; */&#xA;function getCollectionObjectByID( theCollectionObjects, theElementID )&#xA;{&#xA;&#x9;// Cast theElement to EA.Element so we get intellisense&#xA;&#x9;var curCollectionObjects as EA.Collection;&#xA;&#x9;var curCollectionObject  as EA.Element;&#xA;&#xA;&#x9;// Check all Elements in theCollectionObjects whether the requested curElement is already defined&#xA;&#x9;curCollectionObjects = theCollectionObjects;&#xA;&#xA;&#x9;// Loop over curCollectionObjects to find theElementID&#xA;&#x9;let curCollectionObjectsCount = curCollectionObjects.Count;&#xA;&#x9;for ( var i = 0 ; i &lt; curCollectionObjectsCount ; i++ )&#xA;&#x9;{&#xA;&#x9;&#x9;curCollectionObject = curCollectionObjects.GetAt( i );&#xA;&#x9;&#x9;if ( curCollectionObject.ElementID === theElementID ) {&#xA;&#x9;&#x9;&#x9;// Session.Output( &quot;getCollectionObjectByID found CollectionObject ( &quot; + curCollectionObject.ElementID + &quot; ) as part of &quot; + curCollectionObjectsCount + &quot; CollectionObjects!!!&quot; );&#xA;&#x9;&#x9;&#x9;return curCollectionObject;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Session.Output( &quot;getCollectionObjectByID TESTED CollectionObject ( &quot; + curCollectionObject.ElementID + &quot; ) against theElementID &quot; + theElementID + &quot; !!!&quot; );&#xA;&#x9;}&#xA;&#xA;&#x9;// theElementName not found as part of curCollectionObjects&#xA;&#x9;// Session.Output( &quot;getCollectionObjectByID DID NOT FIND theElementID ( &quot; + theElementID + &quot; ) as part of &quot; + curCollectionObjectsCount + &quot; CollectionObjects!!!&quot; );&#xA;&#x9;return null;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Add the Element indicated by theElementID to the diagram if it is not shown yet&#xA; */&#xA;function AddElementToDiagram( theElementID, numX, numY )&#xA;{&#xA;&#xA;&#x9;var curElement        as EA.Element;&#xA;&#x9;var curDiagramObjects as EA.Collection;&#xA;&#x9;var curDiagramObject  as EA.DiagramObject;&#xA;&#x9;var strAddNewName      = &quot;...&quot;;&#xA;&#xA;&#x9;// Check validity of curElement to be found in the repository by theElementID&#xA;&#x9;curElement = Repository.GetElementByID( theElementID );&#xA;&#x9;if ( curElement == null )&#xA;&#x9;{&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;// Check all Elements in theDiagram whether the requested curElement is already shown&#xA;&#x9;curDiagramObjects = theGlobalDiagram.DiagramObjects;&#xA;&#x9;curDiagramObject  = getCollectionObjectByID( curDiagramObjects, curElement.ElementID );&#xA;&#xA;&#x9;// If curElement is not found on theGlobalDiagram, create a new curDiagramObject for it&#xA;&#x9;if ( curDiagramObject === null )&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;// Get the location for the new element&#xA;&#x9;&#x9;strAddNewName = getElementLocation( numX, numY );&#xA;&#x9;&#x9;// Session.Output( &quot;AddElementToDiagram addNew because not found: &quot; + curElement.Name + &quot;, strAddNewName(&quot; + strAddNewName + &quot;) as part of Diagram &quot; + theGlobalDiagram.Name + &quot;, pos(&quot; + numX + &quot;,&quot; + numY + &quot;) !&quot; );&#xA;&#xA;&#x9;&#x9;curDiagramObject = curDiagramObjects.AddNew( strAddNewName, &quot;&quot; );&#xA;&#x9;&#x9;curDiagramObject.ElementID = curElement.ElementID;&#xA;&#x9;&#x9;curDiagramObject.Update();&#xA;&#x9;&#x9;curDiagramObjects.Refresh();&#xA;&#xA;&#x9;&#x9;theGlobalDiagram.Update();&#xA;&#x9;&#x9;Repository.ReloadDiagram( theGlobalDiagram.DiagramID );&#xA;&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#xA;&#x9;// Session.Output( &quot;AddElementToDiagram found &quot; + curDiagramObject.ElementID + &quot; as part of Diagram &quot; + theGlobalDiagram.Name + &quot;, pos(&quot; + numX + &quot;,&quot; + numY + &quot;) !&quot; );&#xA;&#x9;return false;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Add all elements connected to theElementID to theElementsSet&#xA; */&#xA;function AddConnectedElementsToSet( theElementsSet, theElementID )&#xA;{&#xA;&#xA;&#x9;// Cast the input so we get intellisense&#xA;&#x9;var curElementsSet;&#xA;&#x9;var curElement as EA.Element;&#xA;&#x9;curElementsSet  = theElementsSet;&#xA;&#xA;&#x9;// Check validity of curElement to be found in the repository by theElementID&#xA;&#x9;curElement = Repository.GetElementByID( theElementID );&#xA;&#x9;if ( curElement == null )&#xA;&#x9;{&#xA;&#x9;&#x9;return curElementsSet;&#xA;&#x9;}&#xA;&#xA;&#x9;// Process all Elements connected to this Element&#xA;&#x9;var curElementConnectors as EA.Collection;&#xA;&#x9;var curConnector         as EA.Connector;&#xA;&#x9;curElementConnectors      = curElement.Connectors;&#xA;&#xA;&#x9;// Check all element Connectors against data to find&#xA;&#x9;let curElementConnectorsCount = curElementConnectors.Count;&#xA;&#x9;for ( var i = 0 ; i &lt; curElementConnectorsCount ; i++ )&#xA;&#x9;{&#xA;&#x9;&#x9;curConnector = curElementConnectors.GetAt( i );&#xA;&#xA;&#x9;&#x9;// Find the newElementID to be on the other end of the Connector&#xA;&#x9;&#x9;var newElementID = curConnector.ClientID;&#xA;&#x9;&#x9;if ( curConnector.ClientID == curElement.ElementID )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;newElementID = curConnector.SupplierID;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Add the newElementID to curElementsSet&#xA;&#x9;&#x9;curElementsSet.add( newElementID );&#xA;&#x9;&#x9;// Session.Output(&quot;AddConnectedElementsToSet curElement(&quot; + curElement.ElementID + &quot;), newElementID=&quot; + newElementID + &quot;, curConnector.ClientID= &quot; + curConnector.ClientID + &quot;, SupplierID= &quot; + curConnector.SupplierID + &quot;!!!&quot; );&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;curElementConnectors = null;&#xA;&#xA;&#x9;// Session.Output(&quot;AddConnectedElementsToSet returns &quot; + curElementsSet.size + &quot; Elements as part of Diagram &quot; + theGlobalDiagram.Name + &quot;!!!&quot; );&#xA;&#x9;return curElementsSet;&#xA;}&#xA;&#xA;/*&#xA; * Process theElementsSet for theLevel of DiagramAnalysisLayout&#xA; */&#xA;function DALProcessNextLevel( theElementsSet, theLevel )&#xA;{&#xA;&#xA;&#x9;// Only process when the maximum level not reached yet&#xA;&#x9;let curLevel = Number( theLevel );&#xA;&#x9;let maxLevel = Number( mapDiagramLayoutValues.get( DALNumLevels ) );&#xA;&#x9;if ( curLevel &gt;= maxLevel ) {&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;let nextLevel = Number( theLevel ) + 1;&#xA;&#xA;&#x9;// Get first location for theLevel depending on DALDirection&#xA;&#x9;var curHor = 0;&#xA;&#x9;var curVer = 0;&#xA;&#x9;if ( mapDiagramLayoutValues.get( DALDirection ) == DALHorizontal ) {&#xA;&#x9;&#x9;curHor = theLevel;&#xA;&#x9;&#x9;curVer = 0;&#xA;&#x9;} else {&#xA;&#x9;&#x9;curHor = 0;&#xA;&#x9;&#x9;curVer = theLevel;&#xA;&#x9;}&#xA;&#xA;&#x9;// Start new newElementsSet for next level&#xA;&#x9;let newElementsSet   = new Set();&#xA;&#x9;let numElementsShown = 0;&#xA;&#xA;&#x9;// Add elements to diagram and collect connected elements for next level&#xA;&#x9;for ( const setElementID of theElementsSet ) {&#xA;&#xA;&#x9;&#x9;// Add element to diagram and move pointer to next location&#xA;&#x9;&#x9;if ( AddElementToDiagram( setElementID, curHor, curVer ) ) {&#xA;&#x9;&#x9;&#x9;// Got to next location&#xA;&#x9;&#x9;&#x9;numElementsShown++;&#xA;&#x9;&#x9;&#x9;if ( mapDiagramLayoutValues.get( DALDirection ) == DALHorizontal ) {&#xA;&#x9;&#x9;&#x9;&#x9;curVer++;&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;curHor++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;// Add connected elements to newElementsSet&#xA;&#x9;&#x9;&#x9;newElementsSet = AddConnectedElementsToSet( newElementsSet, setElementID );&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Session.Output(&quot;DALProcessNextLevel[&quot; + theLevel + &quot;]: setElementID = &quot; + setElementID + &quot;, Location = [&quot; + curHor + &quot;,&quot; + curVer + &quot;] !&quot; );&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;// Session.Output(&quot;DALProcessNextLevel[&quot; + theLevel + &quot;]: processed &quot; + theElementsSet.size + &quot; Elements as part of Diagram &quot; + theGlobalDiagram.Name + &quot;!!!&quot; );&#xA;&#xA;&#x9;// Process the newElementsSet for nextLevel of DiagramAnalysisLayout if it contains elements only&#xA;&#x9;Session.Output(&quot;DALProcessNextLevel[&quot; + theLevel + &quot;]: processed &quot; + theElementsSet.size + &quot; Elements of which &quot; + numElementsShown + &quot; shown as part of Diagram &quot; + theGlobalDiagram.Name + &quot;!!!&quot; );&#xA;&#x9;if ( newElementsSet.size &gt; 0 ) {&#xA;&#x9;&#x9;DALProcessNextLevel( newElementsSet, nextLevel );&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;newElementsSet = null;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Process an Element provided as parameter for DiagramAnalysisLayout&#xA; */&#xA;function DALProcessElement( theElement )&#xA;{&#xA;&#xA;&#x9;// Cast theElement to EA.Element so we get intellisense&#xA;&#x9;var curElement as EA.Element;&#xA;&#x9;curElement      = theElement;&#xA;&#xA;&#x9;// Create the default values for mapDiagramLayoutValues&#xA;&#x9;createDiagramLayoutValues();&#xA;&#xA;&#x9;// Check whether the currentElement is for DiagramAnalysisLayout&#xA;&#x9;if ( isDiagramAnalysisLayoutElement( curElement ) )&#xA;&#x9;{&#xA;&#x9;&#x9;// Session.Output(&quot;DALProcessElement Process curElement(&quot; + curElement.Name + &quot;) for DiagramAnalysisLayout!!!&quot; );&#xA;&#xA;&#x9;&#x9;// Create and get the mapDiagramLayoutValues&#xA;&#x9;&#x9;getDiagramLayoutValuesFromElement( curElement );&#xA;&#xA;&#x9;&#x9;// Get all Elements connected to this Element&#xA;&#x9;&#x9;let setDiagramLayoutElements = new Set();&#xA;&#x9;&#x9;setDiagramLayoutElements     = AddConnectedElementsToSet( setDiagramLayoutElements, curElement.ElementID );&#xA;&#xA;&#x9;&#x9;// Process the setDiagramLayoutElements for DiagramAnalysisLayout first Level&#xA;&#x9;&#x9;DALProcessNextLevel( setDiagramLayoutElements, 0 );&#xA;&#x9;&#x9;Session.Output(&quot;DALProcessElement curElement(&quot; + curElement.ElementID + &quot;) processed &quot; + setDiagramLayoutElements.size + &quot; Elements connected to Element(&quot; + curElement.Name + &quot;) for Diagram &quot; + theGlobalDiagram.Name + &quot;!!!&quot; );&#xA;&#xA;&#x9;&#x9;// Clean up memory&#xA;&#x9;&#x9;setDiagramLayoutElements = null;&#xA;&#xA;&#x9;} else {&#xA;&#x9;&#x9;Session.Output(&quot;Element(&quot; + curElement.Name + &quot;) is not for DiagramAnalysisLayout!!!&quot; );&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Diagram Script main function&#xA; */&#xA;function DiagramAnalysisLayout()&#xA;{&#xA;&#x9;// Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;&#x9;Session.Output( &quot;======================================= Started DiagramAnalysisLayout &quot; );&#xA;&#xA;&#x9;// Get a reference to theGlobalDiagram&#xA;&#x9;theGlobalDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;&#x9;if ( theGlobalDiagram != null )&#xA;&#x9;{&#xA;&#x9;&#x9;// Get a reference to any selected objects&#xA;&#x9;&#x9;var selectedElement as EA.Element;&#xA;&#x9;&#x9;var selectedObjects as EA.Collection;&#xA;&#x9;&#x9;selectedObjects      = theGlobalDiagram.SelectedObjects;&#xA;&#xA;&#x9;&#x9;if ( selectedObjects.Count &gt; 0 )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Selected selectedObjects.Count: &quot; + selectedObjects.Count );&#xA;&#xA;&#x9;&#x9;&#x9;// One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;let selectedObjectsCount = selectedObjects.Count;&#xA;&#x9;&#x9;&#x9;for ( var i = 0 ; i &lt; selectedObjectsCount ; i++ )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// Process the currentDiagramElement&#xA;&#x9;&#x9;&#x9;&#x9;var currentDiagramElement as EA.Element;&#xA;&#x9;&#x9;&#x9;&#x9;var currentElement        as EA.Element;&#xA;&#x9;&#x9;&#x9;&#x9;currentDiagramElement      = selectedObjects.GetAt( i );&#xA;&#x9;&#x9;&#x9;&#x9;currentElement             = Repository.GetElementByID( currentDiagramElement.ElementID );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Process the currentElement for DiagramAnalysisLayout&#xA;&#x9;&#x9;&#x9;&#x9;DALProcessElement( currentElement );&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;// Reload theGlobalDiagram when all processing is done&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram( theGlobalDiagram.DiagramID );&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Nothing is selected&#xA;&#x9;&#x9;&#x9;LOGError( &quot;This script requires at least one element to be selected!&quot; );&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;Session.Output( &quot;======================================= Finished DiagramAnalysisLayout &quot; );&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;This script requires a diagram to be visible.&quot;, promptOK);&#xA;&#x9;}&#xA;}&#xA;&#xA;DiagramAnalysisLayout();&#xA;" />
		</DataRow></DataSet>
</RefData>