<?xml version="1.0" encoding="Windows-1252" standalone="no"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="2" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{3A1A3FB0-AE40-4616-9330-C198D3C70ADF}" />
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;" />
			<Column name="Script" value="BaatPackageScripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="5" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{915CD06C-E5E6-4c31-968D-A175CF12FC83}" />
			<Column name="ScriptAuthor" value="{3A1A3FB0-AE40-4616-9330-C198D3C70ADF}" />
			<Column name="Notes" value="&lt;Script Name=&quot;ModelDeleteDuplicateTaggedValues&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;" />
			<Column name="Script" value="//[group=BaatPackageScripts]&#xA;!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * This code has been included from the default Project Browser template.&#xA; * &#xA; * Script Name:&#x9;ModelDeleteDuplicateTaggedValues&#xA; * Author:      J de Baat&#xA; * Purpose:     Delete all duplicate TaggedValues present in this model&#xA; * &#x9;&#x9;&#x9;&#x9;NOTE: A TaggedValue is a duplicate if the Name, Value AND Object_ID are identical&#xA; * Date:        20-08-2023&#xA; * &#xA; */&#xA;&#xA;/*&#xA; * Get all duplicate values from the t_objectproperties table&#xA; */&#xA;function GetDuplicateTaggedValues()&#xA;{&#xA;&#xA;&#x9;// Get all the Object_IDs for which there are duplicates&#xA;&#x9;var strSQLQuery = &quot;select op1.Object_ID, op1.Property from t_objectproperties op1&quot;&#xA;                      + &quot; where exists (select 1 from t_objectproperties op2&quot;&#xA;                      +&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where op1.Property   = op2.Property&quot;&#xA;                      +&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;   and op1.Object_ID  = op2.Object_ID&quot;&#xA;                      +&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;   and op1.Value      = op2.Value&quot;&#xA;                      +&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;   and op1.PropertyID &lt; op2.PropertyID&quot;&#xA;                      +&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; )&quot;&#xA;                      + &quot; group by op1.Object_ID&quot;&#xA;                      + &quot; order by op1.Object_ID&quot;&#xA;                      + &quot;; &quot;;&#xA;&#x9;var sqlResponse = Repository.SQLQuery( strSQLQuery );&#xA;&#x9;// Session.Output(&quot;strSQLQuery found sqlResponse= &quot; + sqlResponse + &quot;!!!&quot; );&#xA;&#xA;&#x9;// Convert the sqlResponse from XML to an array of Object_IDs&#xA;&#x9;var arrResponse = convertXMLtoTagNameArray( sqlResponse, &quot;Object_ID&quot; );&#xA;&#xA;&#x9;return arrResponse;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Extract an array from the XML resultset of an SQLQuery based on the xmlTagName&#xA; */&#xA;function convertXMLtoTagNameArray( xmlString, xmlTagName )&#xA;{&#xA;&#xA;&#x9;var xmlDOM = new COMObject( &quot;MSXML2.DOMDocument&quot; );&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;if ( xmlDOM.loadXML( xmlString ) ){&#xA;&#x9;&#x9;var nodeList = xmlDOM.documentElement.selectNodes( '//' + xmlTagName );&#xA;&#x9;&#x9;if ( nodeList.length &gt; 0 ) {&#xA;&#x9;&#x9;&#x9;return nodeList;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return false;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Test whether the TaggedValue[ theTaggedValueIndex ] is a Duplicate in theElement&#xA; *&#xA; * Return:&#x9;false&#x9;theTaggedValueIndex too large OR theTaggedValueIndex NOT a duplicate&#xA; * &#x9;&#x9;&#x9;true&#x9;theTaggedValueIndex IS a duplicate&#xA; */&#xA;function IsTaggedValueDuplicate( theElement, theTaggedValueIndex )&#xA;{&#xA;&#xA;&#x9;// Cast the input values to objects so we get intellisense&#xA;&#x9;var curElement      as EA.Element;&#xA;&#x9;var curElementTags  as EA.Collection;&#xA;&#x9;var curTaggedValue  as EA.TaggedValue;&#xA;&#x9;var testTaggedValue as EA.TaggedValue;&#xA;&#xA;&#x9;curElement     = theElement;&#xA;&#x9;curElementTags = curElement.TaggedValues;&#xA;&#xA;&#x9;// Check theTaggedValueIndex&#xA;&#x9;if ( curElementTags.Count &lt; theTaggedValueIndex )&#xA;&#x9;{&#xA;&#x9;&#x9;// Clean up memory&#xA;&#x9;&#x9;curElementTags = null;&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#xA;&#x9;// Get the curTaggedValue to test against&#xA;&#x9;curTaggedValue = curElementTags.GetAt( theTaggedValueIndex );&#xA;&#xA;&#x9;// Check all previous element tags for duplicate&#xA;&#x9;for ( var i = 0 ; i &lt; theTaggedValueIndex ; i++ )&#xA;&#x9;{&#xA;&#x9;&#x9;testTaggedValue = curElementTags.GetAt( i );&#xA;&#x9;&#x9;if ( (curTaggedValue.Name == testTaggedValue.Name) &amp;&amp; (curTaggedValue.Value == testTaggedValue.Value) ) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Clean up memory&#xA;&#x9;&#x9;&#x9;curElementTags = null;&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;//Session.Output(&quot;COMPARED curElement(&quot; + curElement.Name + &quot;)(&quot; + curElementTags.Count + &quot;) found curTaggedValue.Name= &quot; + curTaggedValue.Name + &quot;, Value= &quot; + curTaggedValue.Value + &quot;, PropertyGUID= &quot; + curTaggedValue.PropertyGUID + &quot;!!!&quot; );&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;curElementTags = null;&#xA;&#xA;&#x9;return false;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Test whether theTaggedValue is a Duplicate and remove it if it is&#xA; */&#xA;function TaggedValueRemoveDuplicate( theElement, theTaggedValueIndex, theNumDuplicates )&#xA;{&#xA;&#xA;&#x9;// Cast the input values to objects so we get intellisense&#xA;&#x9;var curElement     as EA.Element;&#xA;&#x9;var curElementTags as EA.Collection;&#xA;&#x9;var curNumDuplicates;&#xA;&#xA;&#x9;curElement       = theElement;&#xA;&#x9;curElementTags   = curElement.TaggedValues;&#xA;&#x9;curNumDuplicates = theNumDuplicates;&#xA;&#xA;&#x9;// Check if the TaggedValue is a duplicate&#xA;&#x9;if ( IsTaggedValueDuplicate( curElement, theTaggedValueIndex ) )&#xA;&#x9;{&#xA;&#x9;&#x9;// TaggedValue is Duplicate so remove from the Collection&#xA;&#x9;&#x9;curElementTags.Delete( theTaggedValueIndex );&#xA;&#x9;&#x9;curElementTags.Refresh();&#xA;&#xA;&#x9;&#x9;// Clean up memory&#xA;&#x9;&#x9;curElementTags = null;&#xA;&#xA;&#x9;&#x9;return curNumDuplicates + 1;&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;curElementTags = null;&#xA;&#xA;&#x9;return curNumDuplicates;&#xA;&#xA;}&#xA;&#xA;/*&#xA; * Check the TaggedValues of theElement provided as parameter&#xA; */&#xA;function ProcessElement( theElement, theNumDuplicates )&#xA;{&#xA;&#xA;&#x9;// Cast theElement to EA.Element so we get intellisense&#xA;&#x9;var curElement as EA.Element;&#xA;&#x9;var curElementTaggedValues as EA.Collection;&#xA;&#x9;var curNumDuplicates;&#xA;&#x9;var newNumDuplicates;&#xA;&#xA;&#x9;curElement             = theElement;&#xA;&#x9;curElementTaggedValues = curElement.TaggedValues;&#xA;&#x9;curNumDuplicates       = theNumDuplicates;&#xA;&#xA;&#x9;// Check for curElementTaggedValues&#xA;&#x9;if ( curElementTaggedValues.Count &gt; 0 ) {&#xA;&#xA;&#x9;&#x9;// Process all curElementTaggedValues found&#xA;&#x9;&#x9;for ( var i = curElementTaggedValues.Count - 1 ; i &gt;= 0 ; i-- ) {&#xA;&#x9;&#x9;&#x9;// Test whether theTaggedValue is a Duplicate and remove it if it is&#xA;&#x9;&#x9;&#x9;newNumDuplicates = TaggedValueRemoveDuplicate( curElement, i, curNumDuplicates );&#xA;&#x9;&#x9;&#x9;curNumDuplicates = newNumDuplicates;&#xA;&#x9;&#x9;&#x9;// Session.Output(&quot;curElement(&quot; + curElement.Name + &quot;)(&quot; + curElementTaggedValues.Count + &quot;) found TaggedValues[&quot; + i + &quot;]= &quot; + curElementTaggedValues.GetAt(i).Name + &quot;!!!&quot; );&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;} else {&#xA;&#x9;&#x9;Session.Output(&quot;curElement(&quot; + curElement.Name + &quot;) found NO valid curElementTaggedValues!!!&quot; );&#xA;&#x9;}&#xA;&#xA;&#x9;// Clean up memory&#xA;&#x9;curElementTaggedValues = null;&#xA;&#xA;&#x9;return curNumDuplicates;&#xA;}&#xA;&#xA;/*&#xA; * Project Browser Script main function&#xA; */&#xA;function ModelDeleteDuplicateTaggedValues()&#xA;{&#xA;&#x9;// Get the type of element selected in the Project Browser&#xA;&#x9;var treeSelectedType = Repository.GetTreeSelectedItemType();&#xA;&#x9;var curElement as EA.Element;&#xA;&#x9;var strDuplicateTaggedValues = &quot;&quot;;&#xA;&#x9;var intDuplicateTaggedValues = 10;&#xA;&#x9;var curNumDuplicates = 0;&#xA;&#x9;var newNumDuplicates = 0;&#xA;&#xA;&#x9;Session.Output(&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&quot; );&#xA;&#xA;&#x9;strDuplicateTaggedValues = GetDuplicateTaggedValues();&#xA;&#xA;&#x9;// Process the strDuplicateTaggedValues found&#xA;&#x9;if ( strDuplicateTaggedValues.length &gt; 0 ) {&#xA;&#xA;&#x9;&#x9;Session.Output(&quot;Found &quot; + strDuplicateTaggedValues.length + &quot; Elements with duplicates:&quot; );&#xA;&#xA;&#x9;&#x9;// if ( strDuplicateTaggedValues.length &lt;= 10 ) {&#xA;&#x9;&#x9;&#x9;intDuplicateTaggedValues = strDuplicateTaggedValues.length;&#xA;&#x9;&#x9;// }&#xA;&#xA;&#x9;&#x9;// Show info found for max intDuplicateTaggedValues&#xA;&#x9;&#x9;for ( var i = 0 ; i &lt; intDuplicateTaggedValues ; i++ ) {&#xA;&#xA;&#x9;&#x9;&#x9;// Process the curElement found&#xA;&#x9;&#x9;&#x9;curElement = Repository.GetElementByID( strDuplicateTaggedValues.item(i).text );&#xA;&#x9;&#x9;&#x9;newNumDuplicates = ProcessElement( curElement, curNumDuplicates );&#xA;&#x9;&#x9;&#x9;curNumDuplicates = newNumDuplicates;&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Processed duplicate curElement[&quot; + i + &quot;][&quot; + strDuplicateTaggedValues.item(i).text + &quot;].Name= ( &quot; + curElement.Name + &quot; ) with TaggedValues.Count=&quot; + curElement.TaggedValues.Count + &quot; and curNumDuplicates= &quot; + curNumDuplicates + &quot;!!!&quot; );&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;Session.Prompt( &quot;Deleted &quot; + curNumDuplicates + &quot; Duplicates from &quot; + strDuplicateTaggedValues.length + &quot; Elements.&quot;, promptOK);&#xA;&#x9;} else {&#xA;&#x9;&#x9;Session.Output(&quot;Found NO valid strDuplicateTaggedValues!!!&quot; );&#xA;&#x9;&#x9;Session.Prompt( &quot;Found NO Duplicate TaggedValues!!!&quot;, promptOK);&#xA;&#x9;}&#xA;&#xA;&#x9;Session.Output(&quot;===========================================================================================&quot; );&#xA;&#xA;}&#xA;&#xA;ModelDeleteDuplicateTaggedValues();&#xA;" />
		</DataRow></DataSet>
</RefData>