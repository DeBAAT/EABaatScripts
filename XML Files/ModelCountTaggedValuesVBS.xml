<?xml version="1.0" encoding="Windows-1252" standalone="no"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="2" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{3A1A3FB0-AE40-4616-9330-C198D3C70ADF}" />
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;" />
			<Column name="Script" value="BaatPackageScripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="4" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{D93099FF-577F-4208-B0A7-7116FC6103E7}" />
			<Column name="ScriptAuthor" value="{3A1A3FB0-AE40-4616-9330-C198D3C70ADF}" />
			<Column name="Notes" value="&lt;Script Name=&quot;ModelCountTaggedValuesVBS&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="'[group=BaatPackageScripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-XML&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name:&#x9;ModelCountTaggedValuesVBS&#xA;' Author:&#x9;&#x9;J de Baat&#xA;' Purpose:&#x9;&#x9;Count all occurrences of all TaggedValues found for PropertyType enums&#xA;' Date:&#x9;&#x9;&#x9;12-12-2023&#xA;'&#xA;' Note:&#x9;&#x9;Open Excel file for writing and read current contents&#xA;' &#x9;&#x9;&#x9;&#x9;Create new Workbook for Parameters&#xA;' &#x9;&#x9;&#x9;&#x9;For all PropertyTypes to count&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;Find all TaggedValues and count them&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;If  Workbook exists&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;then Read first row with Headers already found&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else Create new Workbook for PropertyType&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Create first row with Headers found&#xA;' &#x9;&#x9;&#x9;&#x9;&#x9;Insert new row with all TaggedValues counted&#xA;&#xA;' Global variables&#xA;dim ExcelApp&#xA;dim ExcelFileName&#xA;dim ExcelWorkBooks&#xA;dim i, j&#xA;&#xA;' Global const definitions for use with Excel&#xA;const xlCenter &#x9;&#x9;&#x9;&#x9;&#x9;= -4108&#xA;const xlLeft &#x9;&#x9;&#x9;&#x9;&#x9;= -4131&#xA;const xlBelow &#x9;&#x9;&#x9;&#x9;&#x9;= 1&#xA;const xlAbove &#x9;&#x9;&#x9;&#x9;&#x9;= 0&#xA;&#xA;Class TaggedValueCounts&#xA;&#x9;'private variables&#xA;&#x9;Private m_TaggedValue&#xA;&#x9;Private m_TaggedValueProperty&#xA;&#x9;Private m_Counts&#xA;&#x9;Private m_Column&#xA;&#xA;&#x9;'constructor&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_TaggedValue = &quot;&quot;&#xA;&#x9;&#x9;m_TaggedValueProperty = &quot;&quot;&#xA;&#x9;&#x9;m_Counts = &quot;&quot;&#xA;&#x9;&#x9;m_Column = 0&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;'public properties&#xA;&#x9;&#xA;&#x9;' TaggedValue property.&#xA;&#x9;Public Property Get TaggedValue&#xA;&#x9;&#x9;TaggedValue = m_TaggedValue&#xA;&#x9;End Property&#xA;&#x9;Public Property Let TaggedValue(value)&#xA;&#x9;&#x9;m_TaggedValue = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' TaggedValueProperty property.&#xA;&#x9;Public Property Get TaggedValueProperty&#xA;&#x9;&#x9;TaggedValueProperty = m_TaggedValueProperty&#xA;&#x9;End Property&#xA;&#x9;Public Property Let TaggedValueProperty(value)&#xA;&#x9;&#x9;m_TaggedValueProperty = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Counts property.&#xA;&#x9;Public Property Get Counts&#xA;&#x9;&#x9;Counts = m_Counts&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Counts(value)&#xA;&#x9;&#x9;m_Counts = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Column property.&#xA;&#x9;Public Property Get Column&#xA;&#x9;&#x9;Column = m_Column&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Column(value)&#xA;&#x9;&#x9;m_Column = value&#xA;&#x9;End Property&#xA;&#xA;End Class&#xA;&#xA;Dim curTaggedValueCounts&#xA;&#xA;'&#xA;' Count all the TaggedValues registered for theTaggedValueProperty&#xA;'&#xA;Function GetTaggedValuesCountsValues( theTaggedValueProperty )&#xA;&#x9;dim strSQLQuery&#xA;&#x9;dim sqlResponse&#xA;&#xA;&#x9;strSQLQuery = &quot;select t_objectproperties.Value as TaggedValues, count(*) as Counts from t_objectproperties&quot; &amp; _&#xA;                  &quot; where t_objectproperties.Property = '&quot; &amp; theTaggedValueProperty &amp; &quot;'&quot; &amp; _&#xA;                  &quot; group by t_objectproperties.Value&quot; &amp; _&#xA;                  &quot; order by t_objectproperties.Value; &quot;&#xA;&#x9;sqlResponse = Repository.SQLQuery( strSQLQuery )&#xA;'&#x9;Session.Output(&quot;strSQLQuery found sqlResponse= &quot; + sqlResponse + &quot;!!!&quot; )&#xA;&#xA;&#x9;if len(sqlResponse) &gt; 0 then&#xA;&#x9;&#x9;set GetTaggedValuesCountsValues = convertQueryResultToDictionary( sqlResponse, &quot;TaggedValues&quot;, &quot;Counts&quot; )&#xA;&#x9;else&#xA;&#x9;&#x9;set GetTaggedValuesCountsValues = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Get a new object for TaggedValueCounts with the parameter given&#xA;'&#xA;Function getTaggedValueCounts( theTaggedValue, theTaggedValueProperty, theCounts, theColumn )&#xA;&#xA;    Dim theTaggedValueCounts&#xA;&#xA;&#x9;set theTaggedValueCounts = new TaggedValueCounts&#xA;&#x9;theTaggedValueCounts.TaggedValue = theTaggedValue&#xA;    theTaggedValueCounts.TaggedValueProperty = theTaggedValueProperty&#xA;    theTaggedValueCounts.Counts = theCounts&#xA;    theTaggedValueCounts.Column = theColumn&#xA;&#xA;&#x9;set getTaggedValueCounts = theTaggedValueCounts&#xA;&#xA;end function&#xA;&#xA;Function convertQueryResultToDictionary(xmlQueryResult, theKey, theValue)&#xA;&#x9;dim curColumn&#xA;&#x9;dim curTotal&#xA;    Dim resultDictionary&#xA;&#x9;set resultDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;resultDictionary.CompareMode = vbBinaryCompare&#xA;&#xA;&#x9;curColumn = 1&#xA;&#x9;curTotal = 0&#xA;&#xA;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDatum&quot;, &quot;Header&quot;, getFormattedDate(), curColumn )&#xA;&#x9;curColumn = curColumn + 1&#xA;&#x9;resultDictionary.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDagVanWeek&quot;, &quot;Header&quot;, Weekday(now()), curColumn )&#xA;&#x9;curColumn = curColumn + 1&#xA;&#x9;resultDictionary.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDagVanMaand&quot;, &quot;Header&quot;, Day(now()), curColumn )&#xA;&#x9;curColumn = curColumn + 1&#xA;&#x9;resultDictionary.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#xA;&#x9;Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#x9;&#x9;Dim rowNode&#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;dim curKey, curValue&#xA;&#x9;&#x9;&#x9;'loop the field nodes&#xA;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;'add the contents&#xA;&#x9;&#x9;&#x9;&#x9;Select Case fieldNode.nodeName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Case theKey&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;curKey = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Case theValue&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;curValue = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;curTotal = curTotal + curValue&#xA;&#x9;&#x9;&#x9;&#x9;End Select&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;' Add the found key,value pair to the resultDictionary&#xA;&#x9;&#x9;&#x9;if len(curKey) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( curKey, &quot;&quot;, curValue, curColumn )&#xA;&#x9;&#x9;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;&#x9;&#x9;resultDictionary.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;&#x9;&#x9;' Session.Output(&quot;convertQueryResultToDictionary found resultDictionary( &quot; &amp; curTaggedValueCounts.TaggedValue &amp; &quot; , &quot; &amp; curTaggedValueCounts.Counts &amp; &quot; )!&quot; )&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;' Add the found curTotal to the resultDictionary&#xA;&#x9;&#x9;if curTotal &gt; 0 then&#xA;&#x9;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;Totaal&quot;, &quot;&quot;, curTotal, curColumn )&#xA;&#x9;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;&#x9;resultDictionary.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;&#x9;' Session.Output(&quot;convertQueryResultToDictionary found resultDictionary( &quot; &amp; curTaggedValueCounts.TaggedValue &amp; &quot; , &quot; &amp; curTaggedValueCounts.Counts &amp; &quot; )!&quot; )&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#xA;&#x9;' Only return the values found when there are values found&#xA;&#x9;if curTotal &gt; 0 then&#xA;&#x9;&#x9;set convertQueryResultToDictionary = resultDictionary&#xA;&#x9;else&#xA;&#x9;&#x9;set convertQueryResultToDictionary = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;'&#xA;' Get the current date in the format yyyy-mm-dd&#xA;'&#xA;Function getFormattedDate()&#xA;&#x9;getFormattedDate = Year(now()) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Month(now()),2) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Day(now()),2)&#xA;end function&#xA;&#xA;'&#xA;' Get the current time in the format hh:mm:ss&#xA;'&#xA;Function getFormattedTime( separator )&#xA;&#x9;getFormattedTime = Right(&quot;0&quot; &amp; Hour(now()),2) &amp; separator &amp; Right(&quot;0&quot; &amp; Minute(now()),2) &amp; separator &amp; Right(&quot;0&quot; &amp; Second(now()),2)&#xA;end function&#xA;&#xA;'&#xA;' Process the current propertyTypeWorksheet&#xA;'&#xA;Function processPropertyTypeWorksheet( thePropertyType, thePropertyTypeIndex )&#xA;&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#x9;set curPropertyType = thePropertyType&#xA;&#xA;&#x9;' Get the propertyTypeWorksheet for the requested curPropertyType.Tag (max 30 characters)&#xA;&#x9;dim propertyTypeWorksheet&#xA;&#x9;dim propertyTypeHeaders&#xA;&#x9;set propertyTypeWorksheet = getWorksheet( Left( curPropertyType.Tag, 30 ), thePropertyTypeIndex )&#xA;&#x9;set propertyTypeHeaders = getPropertyTypeHeaders( curPropertyType, propertyTypeWorksheet )&#xA;&#xA;&#x9;' Count all the TaggedValues registered for curPropertyType.Tag&#xA;&#x9;dim propertyTypeCountsValues&#xA;&#x9;set propertyTypeCountsValues = GetTaggedValuesCountsValues( curPropertyType.Tag )&#xA;&#x9;processPropertyTypeValues curPropertyType, propertyTypeWorksheet, propertyTypeCountsValues, propertyTypeHeaders &#xA;&#x9;if propertyTypeCountsValues is nothing then&#xA;&#x9;&#x9;' Session.Output(&quot;GetTaggedValuesCounts found NO propertyTypeCountsValues for curPropertyType.Tag( &quot; &amp; curPropertyType.Tag &amp; &quot; )!&quot; )&#xA;&#x9;else&#xA;&#x9;&#x9;' Session.Output(&quot;GetTaggedValuesCounts processed &quot; &amp; propertyTypeCountsValues.Count &amp; &quot; propertyTypeCountsValues for curPropertyType.Tag( &quot; &amp; curPropertyType.Tag &amp; &quot; )!&quot; )&#xA;&#x9;&#x9;' Session.Output(&quot;getPropertyTypeHeaders found &quot; &amp; propertyTypeHeaders.Count &amp; &quot; propertyTypeHeaders for curPropertyType.Tag( &quot; &amp; curPropertyType.Tag &amp; &quot; )!&quot; )&#xA;&#x9;end if&#xA;&#xA;&#x9;' Autofit and center columns in the propertyTypeWorksheet&#xA;&#x9;dim targetRange&#xA;&#x9;set targetRange = propertyTypeWorksheet.Range(propertyTypeWorksheet.Cells(1,1), propertyTypeWorksheet.Cells(200,80))&#xA;&#x9;targetRange.Columns.Autofit&#xA;&#x9;set targetRange = propertyTypeWorksheet.Range(&quot;A:Z&quot;)&#xA;&#x9;targetRange.HorizontalAlignment = xlCenter&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Get the PropertyTypeHeaders&#xA;'&#xA;Function getPropertyTypeHeaders( thePropertyType, thePropertyTypeWorksheet )&#xA;&#xA;&#x9;dim curColumn&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#x9;Dim curPropertyTypeEnums&#xA;&#x9;dim dictHeaders&#xA;&#x9;curColumn = 1&#xA;&#x9;set curPropertyType = thePropertyType&#xA;&#x9;set dictHeaders = CreateObject( &quot;Scripting.Dictionary&quot; )&#xA;&#x9;dictHeaders.CompareMode = vbBinaryCompare&#xA;&#xA;&#x9;' Check whether the first row contains Headers&#xA;&#x9;if ( thePropertyTypeWorksheet.Cells(1,1).Value = &quot;ReferentieDatum&quot; ) then&#xA;&#x9;&#x9;' Get the Headers from the first row&#xA;&#x9;&#x9;dim curCol&#xA;&#x9;&#x9;dim curColValue&#xA;&#x9;&#x9;curColumn = 1&#xA;&#x9;&#x9;' Session.Output(&quot;getPropertyTypeHeaders found ReferentieDatum in first row for curPropertyType.Tag( &quot; &amp; curPropertyType.Tag &amp; &quot; )!&quot; )&#xA;&#x9;&#x9;for each curCol in thePropertyTypeWorksheet.Columns&#xA;&#x9;&#x9;&#x9;curColValue = thePropertyTypeWorksheet.Cells(1,curColumn).Value&#xA;&#x9;&#x9;&#x9;if not dictHeaders.Exists( curColValue ) then&#xA;&#x9;&#x9;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( curColValue, curPropertyType.Tag, &quot;0&quot;, curColumn )&#xA;&#x9;&#x9;&#x9;&#x9;dictHeaders.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;&#x9;if not len(thePropertyTypeWorksheet.Cells(1,curColumn).Value) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;' Fill the first row columns with Referentie Data&#xA;&#x9;&#x9;curColumn = 1&#xA;&#x9;&#x9;' Session.Output(&quot;getPropertyTypeHeaders NOT FOUND ReferentieDatum in first row for curPropertyType.Tag( &quot; &amp; curPropertyType.Tag &amp; &quot; )!&quot; )&#xA;&#x9;&#x9;' set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDatum&quot;, curPropertyType.Tag, getFormattedDate() &amp; &quot; - &quot; &amp; getFormattedTime(&quot;:&quot;), curColumn )&#xA;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDatum&quot;, curPropertyType.Tag, getFormattedDate(), curColumn )&#xA;&#x9;&#x9;dictHeaders.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;thePropertyTypeWorksheet.Cells( 1, curColumn ).Value = curTaggedValueCounts.TaggedValue&#xA;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDagVanWeek&quot;, curPropertyType.Tag, Weekday(now()), curColumn )&#xA;&#x9;&#x9;dictHeaders.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;thePropertyTypeWorksheet.Cells( 1, curColumn ).Value = curTaggedValueCounts.TaggedValue&#xA;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( &quot;ReferentieDagVanMaand&quot;, curPropertyType.Tag, Day(now()), curColumn )&#xA;&#x9;&#x9;dictHeaders.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;thePropertyTypeWorksheet.Cells( 1, curColumn ).Value = curTaggedValueCounts.TaggedValue&#xA;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#xA;&#x9;&#x9;curPropertyTypeEnums = GetPropertyTypeEnums( curPropertyType )&#xA;&#x9;&#x9;if not curPropertyTypeEnums(0) = false then&#xA;&#x9;&#x9;&#x9;' Process all curPropertyTypeEnums found&#xA;&#x9;&#x9;&#x9;for i = 0 to Ubound(curPropertyTypeEnums)&#xA;&#x9;&#x9;&#x9;&#x9;set curTaggedValueCounts = getTaggedValueCounts( curPropertyTypeEnums(i), curPropertyType.Tag, &quot;0&quot;, curColumn )&#xA;&#x9;&#x9;&#x9;&#x9;dictHeaders.Add curTaggedValueCounts.TaggedValue, curTaggedValueCounts&#xA;&#x9;&#x9;&#x9;&#x9;thePropertyTypeWorksheet.Cells( 1, curColumn ).Value = curTaggedValueCounts.TaggedValue&#xA;&#x9;&#x9;&#x9;&#x9;curColumn = curColumn + 1&#xA;&#x9;&#x9;&#x9;&#x9;' Session.Output(&quot;getPropertyTypeHeaders for curPropertyType(&quot; &amp; curPropertyType.Tag &amp; &quot;) Processed curPropertyTypeEnums(&quot; &amp; i &amp; &quot;)=&quot; &amp; curPropertyTypeEnums(i) &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;set getPropertyTypeHeaders = dictHeaders&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Get the list of Enum values defined in PropertyType.Detail with format:&#xA;' &#x9;&#x9;Type=Enum;&#xA;' &#x9;&#x9;Values=&lt;Value1&gt;,&lt;Value2&gt;,...,&lt;ValueN&gt;;&#xA;' &#x9;&#x9;Default=&lt;Default&gt;;&#xA;'&#xA;Private Function GetPropertyTypeEnums( thePropertyType )&#xA;&#x9;Dim startPos, endPos&#xA;&#x9;Dim curPropertyTypeEnums&#xA;&#x9;Dim curPropertyTypeValues&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#xA;&#x9;set curPropertyType = thePropertyType&#xA;&#x9;curPropertyTypeValues = curPropertyType.Detail&#xA;&#xA;&#x9;' Get m_startpos as first position after &quot;Values=&quot;&#xA;&#x9;startPos = InStr(1, curPropertyTypeValues, &quot;Values=&quot;, 1) + Len(&quot;Values=&quot;)&#xA;&#x9;If startPos &gt; 0 Then&#xA;&#x9;&#x9;' Get the part of curPropertyTypeValues after &quot;Values=&quot;&#xA;&#x9;&#x9;endPos = Len(curPropertyTypeValues)&#xA;&#x9;&#x9;curPropertyTypeValues = Mid(curPropertyTypeValues, startPos, endPos - startPos)&#xA;&#x9;&#x9;' Strip the part of remaining curPropertyTypeValues after &quot;;&quot;&#xA;&#x9;&#x9;endPos = InStr(1, curPropertyTypeValues, &quot;;&quot;, 1)&#xA;&#x9;&#x9;' Get the Values part of curPropertyTypeValues between &quot;Values=&quot; and &quot;;&quot;&#xA;&#x9;&#x9;curPropertyTypeValues = Left(curPropertyTypeValues, endPos - 1)&#xA;&#x9;&#x9;' Session.Output(&quot;GetPropertyTypeEnums found (&quot; &amp; curPropertyTypeValues &amp; &quot;) in .Detail=&quot; &amp; curPropertyType.Detail &amp; &quot;!&quot; )&#xA;&#xA;&#x9;&#x9;' Split the string in an array of enum values&#xA;&#x9;&#x9;curPropertyTypeEnums = Split(curPropertyTypeValues, &quot;,&quot;, -1, 1)&#xA;&#x9;&#x9;GetPropertyTypeEnums = curPropertyTypeEnums&#xA;&#x9;Else&#xA;&#x9;&#x9;GetPropertyTypeEnums(0) = false&#xA;&#x9;&#x9;Session.Output(&quot;GetPropertyTypeEnums found NO ENUM VALUES in .Detail=&quot; &amp; curPropertyType.Detail &amp; &quot;!&quot; )&#xA;&#x9;End If&#xA;End Function&#xA;&#xA;'&#xA;' Process theValues found and use the PropertyTypeHeaders&#xA;'&#xA;Function processPropertyTypeValues( thePropertyType, thePropertyTypeWorksheet, theValues, theHeaders )&#xA;&#xA;&#x9;dim newColumn&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#x9;dim dictHeaders&#xA;&#x9;dim allItems&#xA;&#x9;dim curItem&#xA;&#x9;dim dictColumn&#xA;&#xA;&#x9;set curPropertyType = thePropertyType&#xA;&#x9;set dictHeaders = theHeaders&#xA;&#x9;dictHeaders.CompareMode = vbBinaryCompare&#xA;&#xA;&#x9;' Insert a new second row to fill theValues found&#xA;&#x9;' thePropertyTypeWorksheet.Cells(2,2).Value = &quot;TestValue&quot;&#xA;&#x9;dim targetRange&#xA;&#x9;set targetRange = thePropertyTypeWorksheet.Range(&quot;A2&quot;)&#xA;&#x9;targetRange.EntireRow.Insert&#xA;&#xA;&#x9;' Fill the already available header columns with a default value&#xA;&#x9;allItems = dictHeaders.Items&#xA;&#x9;for each curItem in allItems&#xA;&#x9;&#x9;dictColumn = dictHeaders.Item(curItem.TaggedValue).Column&#xA;&#x9;&#x9;thePropertyTypeWorksheet.Cells(2,dictColumn).Value = curItem.Counts&#xA;&#x9;next&#xA;&#xA;&#x9;' Process theValues found before and insert them in the new second row&#xA;&#x9;if not theValues is nothing then&#xA;&#x9;&#x9;allItems = theValues.Items&#xA;&#x9;&#x9;newColumn = dictHeaders.Count + 1&#xA;&#x9;&#x9;for each curItem in allItems&#xA;&#x9;&#x9;&#x9;' Get an existing Item, even when the Key IsNumeric&#xA;&#x9;&#x9;&#x9;dictColumn = 0&#xA;&#x9;&#x9;&#x9;if dictHeaders.Exists(curItem.TaggedValue) then&#xA;&#x9;&#x9;&#x9;&#x9;dictColumn = dictHeaders.Item(curItem.TaggedValue).Column&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;processPropertyTypeValues testing IsNumeric theValues.Items(&quot; &amp; dictColumn &amp; &quot;)= &quot; &amp; curItem.TaggedValue &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;if ( IsNumeric( curItem.TaggedValue ) ) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( dictHeaders.Exists(CInt(curItem.TaggedValue)) ) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dictColumn = dictHeaders.Item(CInt(curItem.TaggedValue)).Column&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if ( dictColumn &gt; 0 ) then&#xA;&#x9;&#x9;&#x9;&#x9;thePropertyTypeWorksheet.Cells(2, dictColumn).Value = curItem.Counts&#xA;&#x9;&#x9;&#x9;&#x9;if len( thePropertyTypeWorksheet.Cells(1, dictColumn).Value ) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;thePropertyTypeWorksheet.Cells(1, dictColumn).Value = curItem.TaggedValue&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;' Session.Output(&quot;processPropertyTypeValues only adding theValues.Items(&quot; &amp; dictColumn &amp; &quot;)= &quot; &amp; curItem.TaggedValue &amp; &quot;, Cell=&quot; &amp; thePropertyTypeWorksheet.Cells(1, dictColumn).Value &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;' Session.Output(&quot;processPropertyTypeValues adding header and Cells(1,&quot; &amp; newColumn &amp; &quot;)= &quot; &amp; curItem.TaggedValue &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;dictHeaders.Add curItem.TaggedValue, curItem&#xA;&#x9;&#x9;&#x9;&#x9;thePropertyTypeWorksheet.Cells(1, newColumn).Value = curItem.TaggedValue&#xA;&#x9;&#x9;&#x9;&#x9;thePropertyTypeWorksheet.Cells(2, newColumn).Value = curItem.Counts&#xA;&#x9;&#x9;&#x9;&#x9;newColumn = newColumn + 1&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Process all PropertyTypes in the Repository&#xA;'&#xA;Function processAllPropertyTypes()&#xA;&#xA;&#x9;' Process all PropertyTypes in the Repository&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#x9;dim curPropertyTypeWorksheet&#xA;&#x9;curPropertyTypeWorksheet = 2 ' Parameters is Worksheet 1&#xA;&#x9;for each curPropertyType in Repository.PropertyTypes&#xA;&#x9;&#x9;if Left( curPropertyType.Detail, 9 ) = &quot;Type=Enum&quot; then&#xA;&#x9;&#x9;&#x9;processPropertyTypeWorksheet curPropertyType, curPropertyTypeWorksheet&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;==&gt; ExcelWorkBooks processed propertyTypeWorksheet[&quot; &amp; curPropertyTypeWorksheet &amp; &quot;]= &quot; &amp; curPropertyType.Tag &amp; &quot; with timestampDate: &quot; &amp; getFormattedDate() &amp; &quot;-&quot; &amp; getFormattedTime(&quot;:&quot;) &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;curPropertyTypeWorksheet = curPropertyTypeWorksheet + 1&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;===&gt; SKIP processing NO ENUM propertyType[&quot; &amp; curPropertyType.Tag &amp; &quot;] with timestampDate: &quot; &amp; getFormattedDate() &amp; &quot;-&quot; &amp; getFormattedTime(&quot;:&quot;) &amp; &quot;!&quot; )&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Fill the first sheet with Parameters&#xA;'&#xA;Function processParameterWorksheet()&#xA;&#xA;&#x9;' Get the ParameterSheet&#xA;&#x9;dim parameterWorksheet&#xA;&#x9;set parameterWorksheet = getWorksheet( &quot;Parameters&quot;, 1 )&#xA;&#xA;&#x9;' Create the parameterValues in the parameterWorksheet&#xA;&#x9;i = 1&#xA;&#x9;j = 1&#xA;&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;Generatie datum en tijd&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = Date() &amp; &quot; -- &quot; &amp; Time()&#xA;&#x9;i = i + 1&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;ReferentieDatum&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = getFormattedDate()&#xA;&#x9;i = i + 1&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;ReferentieDagVanWeek&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = Weekday(now())&#xA;&#x9;i = i + 1&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;ReferentieDagVanMaand&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = Day(now())&#xA;&#x9;i = i + 1&#xA;&#x9;Session.Output(&quot;ExcelWorkBooks filled parameterWorksheet with timestampDate: &quot; &amp; getFormattedDate() &amp; &quot; - &quot; &amp; getFormattedTime(&quot;:&quot;) &amp; &quot;!&quot; )&#xA;&#xA;&#x9;' Create the list of PropertyTypes in the parameterWorksheet&#xA;&#x9;dim curPropertyType As EA.PropertyType&#xA;&#x9;i = i + 1&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;PropertyType Overzicht:&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = Repository.PropertyTypes.Count&#xA;&#x9;i = i + 1&#xA;&#x9;j = 1&#xA;&#x9;for each curPropertyType in Repository.PropertyTypes&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;PropertyType[&quot; &amp; j &amp; &quot;]:&quot;&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,2).Value = curPropertyType.Tag&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,3).Value = j&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,4).Value = curPropertyType.Description&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,5).Value = curPropertyType.Detail&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;j = j + 1&#xA;&#x9;next&#xA;&#xA;&#x9;' Create the list of sheets in the parameterWorksheet&#xA;&#x9;dim curWorksheet&#xA;&#x9;i = i + 1&#xA;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;Worksheet Overzicht:&quot;&#xA;&#x9;parameterWorksheet.Cells(i,2).Value = ExcelWorkBooks.Sheets.Count&#xA;&#x9;i = i + 1&#xA;&#x9;j = 1&#xA;&#x9;for each curWorksheet in ExcelWorkBooks.Sheets&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,1).Value = &quot;Sheet[&quot; &amp; j &amp; &quot;]:&quot;&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,2).Value = curWorksheet.Name&#xA;&#x9;&#x9;parameterWorksheet.Cells(i,3).Value = j&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;j = j + 1&#xA;&#x9;next&#xA;&#xA;&#x9;' Autofit columns in the parameterWorksheet&#xA;&#x9;dim targetRange&#xA;&#x9;set targetRange = parameterWorksheet.Range(parameterWorksheet.Cells(1,1), parameterWorksheet.Cells(200,80))&#xA;&#x9;targetRange.Columns.Autofit&#xA;&#x9;set targetRange = parameterWorksheet.Range(&quot;B:C&quot;)&#xA;&#x9;targetRange.HorizontalAlignment = xlCenter&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Get the worksheet by name&#xA;'&#xA;Function getWorksheet( getWorksheetName, beforeSheetIndex )&#xA;&#xA;&#x9;' Get the ParameterSheet&#xA;&#x9;dim curWorksheet&#xA;&#x9;dim foundWorksheet&#xA;&#x9;set foundWorksheet = nothing&#xA;&#xA;&#x9;' Check if getWorksheetName exists&#xA;&#x9;for each curWorksheet in ExcelWorkBooks.Sheets&#xA;&#x9;&#x9;' Session.Output(&quot;ExcelWorkBooks checking curWorksheet.Name: &quot; &amp; curWorksheet.Name &amp; &quot;!&quot; )&#xA;&#x9;&#x9;' Check the names of the worksheets in LowerCase and with max 30 chars&#xA;&#x9;&#x9;if lcase(curWorksheet.Name) = lcase(Left( getWorksheetName, 30 )) then&#xA;&#x9;&#x9;&#x9;set foundWorksheet = curWorksheet&#xA;&#x9;&#x9;&#x9;foundWorksheet.Name = Left( getWorksheetName, 30 )&#xA;&#x9;&#x9;&#x9;' Session.Output(&quot;ExcelWorkBooks found curWorksheet.Name: &quot; &amp; curWorksheet.Name &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;' If parameterWorksheet not exists yet then create&#xA;&#x9;if foundWorksheet is nothing then&#xA;&#x9;&#x9;' Session.Output(&quot;getWorksheet adding [&quot; &amp; getWorksheetName &amp; &quot;] with beforeSheetIndex= &quot; &amp; beforeSheetIndex &amp; &quot;, and ExcelWorkBooks.Sheets.Count= &quot; &amp; ExcelWorkBooks.Sheets.Count &amp; &quot;!&quot; )&#xA;&#x9;&#x9;' Check the beforeIndex. In -1 then add after the last one&#xA;&#x9;&#x9;if beforeSheetIndex &gt; 0 and beforeSheetIndex &lt;= ExcelWorkBooks.Sheets.Count then&#xA;&#x9;&#x9;&#x9;Set foundWorksheet = ExcelWorkBooks.Sheets.Add(ExcelWorkBooks.Sheets(beforeSheetIndex))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Set foundWorksheet = ExcelWorkBooks.Sheets.Add(,ExcelWorkBooks.Sheets(ExcelWorkBooks.Sheets.Count))&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;' Set the name of this sheet with max 30 characters&#xA;&#x9;&#x9;foundWorksheet.Name = Left( getWorksheetName, 30 )&#xA;&#x9;else&#xA;&#x9;&#x9;' Session.Output(&quot;ExcelWorkBooks found foundWorksheet.Name: &quot; &amp; foundWorksheet.Name &amp; &quot;!&quot; )&#xA;&#x9;end if&#xA;&#xA;&#x9;set getWorksheet = foundWorksheet&#xA;&#xA;end function&#xA;&#xA;'&#xA;' Get the getExcelWorkbooks file to read from and write the output to&#xA;'&#xA;Function getExcelWorkbooks()&#xA;&#xA;&#x9;dim strDefaultFileName&#xA;&#x9;' strDefaultFileName = &quot;ModelCountTaggedValuesVBS-&quot; &amp; getFormattedDate() &amp; &quot; &quot; &amp; getFormattedTime( &quot;-&quot; ) &amp; &quot;.xlsx&quot;&#xA;&#x9;strDefaultFileName = &quot;Actium Repository TaggedValues EA SaaS.xlsx&quot;&#xA;&#xA;&#x9;' Get the outputFileName to store the information in&#xA;&#x9;dim project&#xA;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;ExcelFileName = project.GetFileNameDialog (strDefaultFileName, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 2 ,&quot;&quot;, 1) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;Session.Output( &quot;ExcelFileName = &quot; &amp; ExcelFileName )&#xA;&#xA;&#x9;' Get the excelFileWorkBook to store the information in&#xA;&#x9;dim fileSystemObject&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;if fileSystemObject.FileExists(ExcelFileName) then&#xA;&#x9;&#x9;' Open the existing excelFileWorkBook to store the information in&#xA;&#x9;&#x9;set ExcelWorkBooks = ExcelApp.Workbooks.Open( ExcelFileName )&#xA;&#x9;else&#xA;&#x9;&#x9;' Make sure we have a filename&#xA;&#x9;&#x9;if len(ExcelFileName) = 0 then&#xA;&#x9;&#x9;&#x9;set ExcelWorkBooks = nothing&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;ExcelWorkBooks not created because ExcelFileName is not defined&quot; )&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Create a new empty excelFileWorkBook to store the information in&#xA;&#x9;&#x9;&#x9;set ExcelWorkBooks = ExcelApp.Workbooks.Add()&#xA;&#x9;&#x9;&#x9;ExcelWorkBooks.ActiveSheet.Name = &quot;Parameters&quot;&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;ExcelWorkBooks found ActiveSheet.Name: &quot; &amp; ExcelWorkBooks.ActiveSheet.Name &amp; &quot;!&quot; )&#xA;&#x9;&#x9;&#x9;ExcelWorkBooks.Saveas( ExcelFileName )&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub ModelCountTaggedValuesVBS()&#xA;&#xA;&#x9;dim numPropertyTypes&#xA;&#xA;&#x9;' Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;set ExcelApp = CreateObject(&quot;Excel.Application&quot;)&#xA;&#x9;set curTaggedValueCounts = new TaggedValueCounts&#xA;&#xA;&#x9;Session.Output( &quot;ModelCountTaggedValuesVBS&quot; )&#xA;&#x9;Session.Output( &quot;=======================================&quot; )&#xA;&#xA;&#x9;Repository.PropertyTypes.Refresh&#xA;&#x9;numPropertyTypes = Repository.PropertyTypes.Count&#xA;&#xA;&#x9;' Process the numPropertyTypes found&#xA;&#x9;if ( numPropertyTypes &gt; 0 ) then&#xA;&#xA;&#x9;&#x9;' Get ExcelWorkBooks to read from and write to&#xA;&#x9;&#x9;dim excelWorkSheets&#xA;&#x9;&#x9;getExcelWorkbooks()&#xA;&#xA;&#x9;&#x9;if ( not ExcelWorkBooks is nothing ) and (len(ExcelApp.Workbooks.Count) &gt; 0 ) then&#xA;&#xA;&#x9;&#x9;&#x9;' Get excelWorkSheets to process the information&#xA;&#x9;&#x9;&#x9;set excelWorkSheets = ExcelWorkBooks.Sheets&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;ExcelApp.Workbooks Found &quot; &amp; ExcelApp.Workbooks.Count &amp; &quot; ExcelWorkBooks and &quot; &amp; excelWorkSheets.Count &amp; &quot; excelWorkSheets!&quot; )&#xA;&#x9;&#x9;&#x9;' Show the worksheets found&#xA;&#x9;&#x9;&#x9;' dim curWorksheet&#xA;&#x9;&#x9;&#x9;' for each curWorksheet in ExcelWorkBooks.Sheets&#xA;&#x9;&#x9;&#x9;' &#x9;Session.Output(&quot;ExcelWorkBooks found curWorksheet.Name &quot; &amp; curWorksheet.Name &amp; &quot; in excelWorkSheets!&quot; )&#xA;&#x9;&#x9;&#x9;' next&#xA;&#xA;&#x9;&#x9;&#x9;' Fill the first sheet with Parameters&#xA;&#x9;&#x9;&#x9;processParameterWorksheet()&#xA;&#xA;&#x9;&#x9;&#x9;' Process all PropertyTypes in the Repository&#xA;&#x9;&#x9;&#x9;processAllPropertyTypes()&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Processed &quot; &amp; numPropertyTypes &amp; &quot; PropertyTypes.&quot;, promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' No valid ExcelApp.Workbooks Found&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Cancelled Processing &quot; &amp; numPropertyTypes &amp; &quot; PropertyTypes because no valid ExcelApp.Workbooks Found in ExcelWorkBooks!&quot; )&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Cancelled Processing &quot; &amp; numPropertyTypes &amp; &quot; PropertyTypes.&quot;, promptOK&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Output( &quot;Found NO valid PropertyTypes!!!&quot; )&#xA;&#x9;&#x9;Session.Prompt &quot;Found NO valid PropertyTypes!!!&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;&#x9;' Save the active ExcelWorkBooks and Close the ExcelApp&#xA;&#x9;if ( not ExcelWorkBooks is nothing ) then&#xA;&#x9;&#x9;ExcelWorkBooks.Save&#xA;&#x9;end if&#xA;&#x9;ExcelApp.Workbooks.Close&#xA;&#xA;&#x9;Session.Output( &quot;Processed &quot; &amp; numPropertyTypes &amp; &quot; PropertyTypes and closed &quot; &amp; ExcelFileName &amp; &quot;.&quot; )&#xA;&#x9;Session.Output( &quot;======================================= Closed&quot; )&#xA;&#x9;&#xA;end sub&#xA;&#xA;ModelCountTaggedValuesVBS&#xA;" />
		</DataRow></DataSet>
</RefData>